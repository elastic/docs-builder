@using Elastic.Markdown.Helpers
@using Elastic.Markdown.IO.Navigation
@inherits RazorSlice<NavigationTreeItem>
@if (Model.IsRedesign)
{
	@foreach (var item in Model.SubTree.NavigationItems)
	{
		if (item is FileNavigation file)
		{
			var f = file.File;
			var isCurrent = f == Model.CurrentDocument;
			<li class="block pl-4 w-full @(isCurrent ? "current" : string.Empty)">
				<div class="flex">
					<div class="w-6">
					</div>
					<a
						class="block py-1 w-full hover:font-bold @(isCurrent ? "font-bold text-blue-elastic" : string.Empty) "
						href="@f.Url">
						@f.NavigationTitle
					</a>
				</div>
			</li>
		}
		else if (item is GroupNavigation folder)
		{
			var g = folder.Group;
			var isCurrent = g.Index == Model.CurrentDocument;
			var slug = g.Index?.Title.Slugify();
			const int initialExpandLevel = 1;
			var shouldExpand = g.HoldsCurrent(Model.CurrentDocument) || g.Depth <= initialExpandLevel || g.ContainsCurrentPage(Model.CurrentDocument);
			<li class="flex flex-wrap pl-4">
				<label for="@slug" class="peer group flex items-center mr-1">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="1.5"
						stroke="currentColor"
						class="w-4 shrink -rotate-90 group-has-checked:rotate-0 cursor-pointer">
						<path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5"/>
					</svg>
					<input
						id="@slug"
						type="checkbox"
						class="hidden"
						aria-hidden="true"
						data-should-expand="@shouldExpand.ToLowerString()"
						@(shouldExpand ? "checked" : string.Empty)>
				</label>
				<a
					href="@g.Index?.Url"
					class="block py-1 grow hover:font-bold @(isCurrent ? "font-bold text-blue-elastic" : string.Empty) ">
					@g.Index?.NavigationTitle
				</a>
				@if (g.NavigationItems.Count > 0)
				{
					<ul class="h-0 grow overflow-hidden peer-has-checked:h-auto w-full overflow-hidden" data-has-current="@g.ContainsCurrentPage(Model.CurrentDocument)">
						@await RenderPartialAsync(_TocTreeNav.Create(new NavigationTreeItem
						{
							Level = g.Depth,
							CurrentDocument = Model.CurrentDocument,
							SubTree = g
						}))
					</ul>
				}
			</li>
		}
	}
}
else
{
	@foreach (var item in Model.SubTree.NavigationItems)
	{
		if (item is FileNavigation file)
		{
			var f = file.File;
			var current = f == Model.CurrentDocument ? " current" : string.Empty;
			<li class="toctree-l@(Model.SubTree.Depth + 1)@current"><a class="@(current.Trim()) reference internal" href="@f.Url">@f.NavigationTitle</a></li>
		}
		else if (item is GroupNavigation folder)
		{
			var g = folder.Group;
			var current = g.HoldsCurrent(Model.CurrentDocument) ? " current" : string.Empty;
			var currentFile = g.Index == Model.CurrentDocument ? " current" : string.Empty;
			<li class="toctree-l@(g.Depth)@current"><a class="reference internal@(currentFile)" href="@g.Index?.Url">@g.Index?.NavigationTitle</a>@if (@g.NavigationItems.Count > 0) {<ul class="@(current.Trim())">
					                                                                                                                                      @await RenderPartialAsync(_TocTreeNav.Create(new NavigationTreeItem
					                                                                                                                                      {
						                                                                                                                                      Level = g.Depth,
						                                                                                                                                      CurrentDocument = Model.CurrentDocument,
						                                                                                                                                      SubTree = g
					                                                                                                                                      }))
				                                                                                                                                      </ul>
			                                                                                                                                      }
			</li>
		}
	}
}
