@using Elastic.Markdown.Helpers
@using Elastic.Markdown.IO.Navigation
@inherits RazorSlice<NavigationTreeItem>
@{
	var topLevel = Model.IsRoot ? 1 : 2;
}
@foreach (var item in Model.SubTree.NavigationItems)
{
	var id = item.Id;
	if (item is FileNavigation file)
	{
		var f = file.File;
		<li class="block group/li mt-4 lg:mt-1 ml-4">
				<a
					hx-get="@f.Url"
					hx-select-oob="@Htmx.GetHxSelectOob(Model.Features, Model.CurrentDocument.UrlPathPrefix, Model.CurrentDocument.Url, f.Url)"
					data-current-url="@Model.CurrentDocument.Url"
					data-target-url="@f.Url"
					data-path-prefix="@Model.CurrentDocument.UrlPathPrefix"
					data-has-same-segment="@Htmx.HasSameTopLevelGroup(Model.CurrentDocument.UrlPathPrefix, Model.CurrentDocument.Url, f.Url)"
					hx-swap="none"
					hx-push-url="true"
					hx-indicator="#htmx-indicator"
					preload
					class="sidebar-link group-[.current]/li:text-blue-elastic!"
					id="page-@id"
					href="@f.Url">
					@f.NavigationTitle
				</a>
		</li>
	}
	else if (item is GroupNavigation folder)
	{
		var g = folder.Group;
		// const int initialExpandLevel = 3;
		// var shouldInitiallyExpand = g.Depth <= initialExpandLevel;
		<li class="flex flex-wrap group-navigation @(g.Depth == topLevel ? "mt-6 lg:mt-4" : "mt-4 lg:mt-2")">
			<label for="@id" class="peer group/label flex items-start">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					width="12"
					class="w-3 mr-1 mt-[5px] lg:mt-[3px] shrink-0 -rotate-90 group-has-checked/label:rotate-0 cursor-pointer @(g.Depth == topLevel ? "hidden" : "")">
					<path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5"/>
				</svg>
				<input
					id="@id"
					type="checkbox"
					class="hidden"
					aria-hidden="true"
					@(g.Depth <= topLevel ? "checked" : "")
					@(g.Depth <= topLevel ? "disabled" : "")
					>
				<a
					href="@(g.Index?.Url ?? "")"
					@Htmx.GetHxAttributes(Model.Features, Model.CurrentDocument.UrlPathPrefix, Model.CurrentDocument.Url, g.Index?.Url ?? "")
					id="page-@(g.Index?.Id ?? id)"
					class="sidebar-link @(g.Depth == topLevel ? "font-semibold mt-2 mb-1" : "")">
					@(g.Index?.NavigationTitle ?? "Untitled")
				</a>
			</label>
			@if (g.NavigationItems.Count > 0)
			{
				<ul class="w-full hidden peer-has-checked:block peer-has-[:focus]:block focus-within:block @(g.Depth > topLevel ? "ml-4": "")">
					@await RenderPartialAsync(_TocTreeNav.Create(new NavigationTreeItem
					{
						Features = Model.Features,
						Level = g.Depth,
						CurrentDocument = Model.CurrentDocument,
						SubTree = g,
						IsRoot = Model.IsRoot
					}))
				</ul>
			}
		</li>
	}
}
