@using Elastic.Markdown.Helpers
@using Elastic.Markdown.IO.Navigation
@inherits RazorSlice<NavigationTreeItem>
@{
	var isTopLevel = Model.Level == 0;
}
@foreach (var item in Model.SubTree.NavigationItems)
{
	var id = item.Id;
	if (item is FileNavigationItem file && Model.SubTree.IndexFileName != file.File.FileName)
	{
		var f = file.File;
		<li class="flex group/li pr-4 @(isTopLevel ? "font-semibold py-8 pr-4 not-last:border-b-1 border-grey-20" : "ml-5 lg:ml-4 mt-4 lg:mt-3")">
			<a
				href="@f.Url"
				@Htmx.GetHxAttributes(f.Url, Model.IsPrimaryNavEnabled && f.NavigationRoot.Id == Model.RootNavigationId || true)
				class="sidebar-link group-[.current]/li:text-blue-elastic!"
				id="page-@id"
				>
				@f.NavigationTitle
			</a>
		</li>
	}
	else if (item is GroupNavigationItem { Group: { NavigationItems.Count: 0, Index: not null } } group)
	{
		var f = group.Group.Index;
		<li class="flex group/li pr-4 @(isTopLevel ? "font-semibold py-8 pr-4 not-last:border-b-1 border-grey-20" : "ml-5 lg:ml-4 mt-4 lg:mt-3")">
			<a
				href="@f.Url"
				@Htmx.GetHxAttributes(f.Url, Model.IsPrimaryNavEnabled && f.NavigationRoot.Id == Model.RootNavigationId || true)
				class="sidebar-link group-[.current]/li:text-blue-elastic!"
				id="page-@id"
			>
				@f.NavigationTitle
			</a>
		</li>
	}
	else if (item is GroupNavigationItem folder)
	{
		var g = folder.Group;
		<li class="flex flex-wrap group-navigation @(isTopLevel ? "py-8 not-last:border-b-1 border-grey-20 pr-4" : "mt-4 lg:mt-3")">
			<div class="peer flex items-start gap-1">
				<label for="@id" class="group/label">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="1.5"
						stroke="currentColor"
						class="w-3 mt-[3px] shrink-0 -rotate-90 group-has-checked/label:rotate-0 cursor-pointer @(isTopLevel ? "hidden" : "")">
						<path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5"/>
					</svg>
					<input
						id="@id"
						type="checkbox"
						class="hidden"
						aria-hidden="true"
						@(isTopLevel ? "checked" : "")
						@(isTopLevel ? "disabled" : "")
					>
				</label>
				<a
					href="@(g.Index?.Url ?? "")"
					@Htmx.GetHxAttributes(g.Index?.Url ?? "", Model.IsPrimaryNavEnabled && g.NavigationRootId == Model.RootNavigationId || true)
					id="page-@(g.Index?.Id ?? id)"
					class="sidebar-link @(isTopLevel ? "font-semibold font-sans mb-1 text-base" : "")">
					@(g.Index?.NavigationTitle ?? (g as TableOfContentsTree)?.Source.ToString() ?? "Untitled")
				</a>
			</div>
			@if (g.NavigationItems.Count > 0)
			{
				<ul class="w-full hidden peer-has-checked:block @(Model.Level > 0 ? "ml-4": "")">
					@await RenderPartialAsync(_TocTreeNav.Create(new NavigationTreeItem
					{
						IsPrimaryNavEnabled = Model.IsPrimaryNavEnabled,
						IsGlobalAssemblyBuild = Model.IsGlobalAssemblyBuild,
						Level = Model.Level + 1,
						SubTree = g,
						RootNavigationId = Model.RootNavigationId
					}))
				</ul>
			}
		</li>
	}
}
