@using Elastic.Markdown.Myst.FrontMatter
@inherits RazorSlice<Elastic.Markdown.Myst.FrontMatter.Deployment>
<p class="product-availability">
	<span class="applies-to-label sd-badge sd-outline-transparent sd-text-black">
		Applies To:
	</span>
	@if (Model.SelfManaged is not null)
	{
		if (Model.SelfManaged.Stack is not null)
		{
			@RenderProduct("Elastic Stack", Model.SelfManaged.Stack)
		}
		if (Model.SelfManaged.Ece is not null)
		{
			@RenderProduct("Elastic Cloud Enterprise", Model.SelfManaged.Ece)
		}
		if (Model.SelfManaged.Eck is not null)
		{
			@RenderProduct("Elastic Cloud Kubernetes", Model.SelfManaged.Eck)
		}
	}
	@if (Model.Cloud is not null)
	{
		if (Model.Cloud.Hosted is not null)
		{
			@RenderProduct("Elastic Cloud Hosted", Model.Cloud.Hosted)
		}
		if (Model.Cloud.Serverless is not null)
		{
			@RenderProduct("Serverless", Model.Cloud.Serverless)
		}
	}
</p>

@functions {

	private string GetLifeCycleClass(ProductLifecycle cycle)
	{
		switch (cycle)
		{
			case ProductLifecycle.Deprecated:
			case ProductLifecycle.Coming:
			case ProductLifecycle.Discontinued:
			case ProductLifecycle.Unavailable:
				return "muted";
			case ProductLifecycle.GenerallyAvailable:
			case ProductLifecycle.TechnicalPreview:
			case ProductLifecycle.Beta:
			case ProductLifecycle.Development:
				return "primary";
			default:
				throw new ArgumentOutOfRangeException(nameof(cycle), cycle, null);
		}
	}
	private string GetLifeCycleName(ProductLifecycle cycle)
	{
		switch (cycle)
		{
			case ProductLifecycle.TechnicalPreview:
				return "Technical Preview";
			case ProductLifecycle.Beta:
				return "Beta";
			case ProductLifecycle.Development:
				return "Development";
			case ProductLifecycle.Deprecated:
				return "Deprecated";
			case ProductLifecycle.Coming:
				return "Coming";
			case ProductLifecycle.Discontinued:
				return "Discontinued";
			case ProductLifecycle.Unavailable:
				return "Unavailable";
			case ProductLifecycle.GenerallyAvailable:
				return "GA";
			default:
				throw new ArgumentOutOfRangeException(nameof(cycle), cycle, null);
		}
	}

	private IHtmlContent RenderProduct(string name, ProductAvailability product)
	{
		var c = GetLifeCycleClass(product.Lifecycle);
		<span class="sd-badge sd-outline-@c sd-text-@c applies-badge">
			@name
			@if (product.Lifecycle != ProductLifecycle.GenerallyAvailable)
			{
				<span class="sd-text-secondary">@GetLifeCycleName(product.Lifecycle)</span>
			}
			@if (product.Version is not null and not AllVersions)
			{
				<span class="sd-text-success">(@product.Version)</span>
			}
		</span>
		return HtmlString.Empty;
	}
}