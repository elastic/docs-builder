@using Elastic.Markdown.Slices.Components
@using Markdig
@inherits RazorSliceHttpResult<IndexViewModel>
@implements IUsesLayout<Elastic.Markdown.Slices._Layout, LayoutViewModel>
@functions {
	public LayoutViewModel LayoutModel => new()
	{
		DocSetName = Model.DocSetName,
		Title = Model.CurrentDocument.Parent == null ? Model.Title : $"{Model.Title} | {Model.SiteName}",
		Description = Model.Description,
		PageTocItems = Model.PageTocItems.Where(i => i is { Level: 2 or 3 }).ToList(),
		CurrentDocument = Model.CurrentDocument,
		Previous = Model.PreviousDocument,
		Next = Model.NextDocument,
		NavigationHtml = Model.NavigationHtml,
		UrlPathPrefix = Model.UrlPathPrefix,
		GithubEditUrl = Model.GithubEditUrl,
		AllowIndexing = Model.AllowIndexing,
		CanonicalBaseUrl = Model.CanonicalBaseUrl,
		GoogleTagManager = Model.GoogleTagManager,
		Features = Model.Features,
		StaticFileContentHashProvider = Model.StaticFileContentHashProvider,
		ReportIssueUrl = Model.ReportIssueUrl,
		LegacyPage = Model.LegacyPage
	};
}
<section id="elastic-docs-v3">
	@* This way it's correctly rendered as <h1>text</h1> instead of <h1><p>text</p></h1> *@
	@(new HtmlString(Markdown.ToHtml("# " + Model.TitleRaw)))
	@if (Model.AppliesTo is not null)
	{
		<p class="applies">
		@await RenderPartialAsync(ApplicableToComponent.Create(new ApplicableToViewModel
		{
			AppliesTo = Model.AppliesTo,
			Inline = false
		}))
		</p>
	}
	@(new HtmlString(Model.MarkdownHtml))
</section>
