@inherits RazorSlice<Elastic.Markdown.Myst.Directives.Image.ImageCarouselViewModel>
@{
    // Convert semantic height values to pixel values
    var maxHeightValue = Model.MaxHeight?.ToLower();
    string? pixelHeight = maxHeightValue switch
    {
        "small" => "350px",
        "medium" => "750px",
        "none" => "none",  // None means no max-height constraint
        null or "" => null,
        _ => null // Default to none for invalid values
    };
    
    var hasMaxHeight = !string.IsNullOrEmpty(pixelHeight) && maxHeightValue != null && maxHeightValue != "none";
    var containerStyle = hasMaxHeight ? $"--carousel-max-height: {pixelHeight};" : "";
    var dataAttribute = maxHeightValue == "none" ? "data-none-height" : (hasMaxHeight ? "data-max-height" : "");
}
<div class="carousel-container" @dataAttribute style="@containerStyle">
    <div class="carousel-track">
        @for (int i = 0; i < Model.Images.Count; i++)
        {
            var image = Model.Images[i];
            <div class="carousel-slide" data-index="@i" @(i == 0 ? "data-active=true" : "")>
                <a class="carousel-image-reference reference internal image-reference" href="javascript:void(0)" data-modal-id="modal-@(image.UniqueImageId)">
                    <img title="@image.Title" alt="@(image.Alt ?? "")" src="@image.ImageUrl" style="@image.Style" />
                </a>
            </div>
        }
    </div>
    
    @if (Model.Images.Count > 1)
    {
        <button type="button" class="carousel-control carousel-prev" aria-label="Previous slide">
            <span aria-hidden="true">←</span>
        </button>
        <button type="button" class="carousel-control carousel-next" aria-label="Next slide">
            <span aria-hidden="true">→</span>
        </button>
    }
    
    @if (Model.Images.Count > 1)
    {
        <div class="carousel-indicators">
            @for (int i = 0; i < Model.Images.Count; i++)
            {
                <button type="button" 
                        class="carousel-indicator" 
                        data-index="@i"
                        @(i == 0 ? "data-active=true" : "")
                        aria-label="Go to slide @(i+1)"></button>
            }
        </div>
    }
</div>

@* Add modal for each image *@
@for (int i = 0; i < Model.Images.Count; i++)
{
    var image = Model.Images[i];
    <div id="modal-@(image.UniqueImageId)" class="modal"
        onclick="document.querySelector('#modal-@(image.UniqueImageId) .modal-content').contains(event.target) ? void(0) : document.getElementById('modal-@(image.UniqueImageId)').style.display='none'">
        <div class="modal-content">
            <span class="modal-close">
                <a href="javascript:void(0);" class="close-button"
                    onclick="document.getElementById('modal-@(image.UniqueImageId)').style.display='none'">
                    &times;
                </a>
            </span>
            <a class="reference internal image-reference" href="@image.ImageUrl" target="_blank">
                <img title="@image.Title" alt="@(image.Alt ?? "")" src="@image.ImageUrl" />
            </a>
        </div>
    </div>
}
