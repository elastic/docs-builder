@using System.Diagnostics.CodeAnalysis
@using Elastic.Documentation
@using Elastic.Documentation.Configuration.Versions
@using Elastic.Markdown.Myst.FrontMatter
@inherits RazorSlice<Elastic.Markdown.Myst.Components.ApplicableToViewModel>

@{
	var appliesTo = Model.AppliesTo;
}

@if (appliesTo.Stack is not null)
{
	@RenderProduct(
		"Stack",
		"Part of the versioned Elastic Stack\n\nAvailable in ECH, ECE, ECK, and self-managed deployments, unless otherwise stated",
		VersioningSystemId.Stack,
		appliesTo.Stack
	)
}
@if (appliesTo.Deployment is not null)
{
	if (appliesTo.Deployment.Ece is not null)
	{
		@RenderProduct("ECE",
			"Elastic Cloud Enterprise",
			VersioningSystemId.Ece,
			appliesTo.Deployment.Ece
		)
	}

	if (appliesTo.Deployment.Eck is not null)
	{
		@RenderProduct(
			"ECK",
			"Elastic Cloud on Kubernetes",
			VersioningSystemId.Eck,
			appliesTo.Deployment.Eck
		)
	}

	if (appliesTo.Deployment.Ess is not null)
	{
		@RenderProduct(
			"ECH",
			"Elastic Cloud Hosted",
			VersioningSystemId.Ess,
			appliesTo.Deployment.Ess
		)
	}

	if (appliesTo.Deployment.Self is not null)
	{
		@RenderProduct(
			"Self-Managed",
			"Self-managed Elastic deployments",
			VersioningSystemId.Self,
			appliesTo.Deployment.Self
		)
	}
}
@if (appliesTo.Serverless is not null)
{
	if (appliesTo.Serverless.AllProjects is not null)
	{
		@RenderProduct(
			"Serverless",
			"Elastic Cloud Serverless: Fully-managed Elastic, available in Elastic Cloud",
			VersioningSystemId.Serverless,
			appliesTo.Serverless.AllProjects
		)
	}
	else
	{
		if (appliesTo.Serverless.Elasticsearch is not null)
		{
			@RenderProduct(
				"Serverless Elasticsearch",
				"Serverless Elasticsearch projects",
				VersioningSystemId.Elasticsearch,
				appliesTo.Serverless.Elasticsearch
			)
		}

		if (appliesTo.Serverless.Observability is not null)
		{
			@RenderProduct(
				"Serverless Observability",
				"Serverless Observability projects",
				VersioningSystemId.Observability,
				appliesTo.Serverless.Observability
			)
		}

		if (appliesTo.Serverless.Security is not null)
		{
			@RenderProduct(
				"Serverless Security",
				"Serverless Security projects",
				VersioningSystemId.Security,
				appliesTo.Serverless.Security
			)
		}
	}
}
@if (appliesTo.Product is not null)
{
	@RenderProduct("", "", VersioningSystemId.All, appliesTo.Product)
}
@if (appliesTo.ProductApplicability is not null)
{
	var pa = appliesTo.ProductApplicability;
	if (pa.Ecctl is not null)
	{
		@RenderProduct("ECCTL", "Elastic Cloud Control", VersioningSystemId.Ecctl, pa.Ecctl)
		;
	}

	if (pa.Curator is not null)
	{
		@RenderProduct("Curator", "", VersioningSystemId.Curator, pa.Curator)
		;
	}

	if (pa.ApmAgentAndroid is not null)
	{
		@RenderProduct("APM Agent Android", "Application Performance Monitoring Agent for Android", VersioningSystemId.ApmAgentAndroid, pa.ApmAgentAndroid)
		;
	}

	if (pa.ApmAgentDotnet is not null)
	{
		@RenderProduct("APM Agent .NET", "Application Performance Monitoring Agent for .NET", VersioningSystemId.ApmAgentDotnet, pa.ApmAgentDotnet)
		;
	}

	if (pa.ApmAgentGo is not null)
	{
		@RenderProduct("APM Agent Go", "Application Performance Monitoring Agent for Go", VersioningSystemId.ApmAgentGo, pa.ApmAgentGo)
		;
	}

	if (pa.ApmAgentIos is not null)
	{
		@RenderProduct("APM Agent iOS", "Application Performance Monitoring Agent for iOS", VersioningSystemId.ApmAgentIos, pa.ApmAgentIos)
		;
	}

	if (pa.ApmAgentJava is not null)
	{
		@RenderProduct("APM Agent Java", "Application Performance Monitoring Agent for Java", VersioningSystemId.ApmAgentJava, pa.ApmAgentJava)
		;
	}

	if (pa.ApmAgentNode is not null)
	{
		@RenderProduct("APM Agent Node.js", "Application Performance Monitoring Agent for Node.js", VersioningSystemId.ApmAgentNode, pa.ApmAgentNode)
		;
	}

	if (pa.ApmAgentPhp is not null)
	{
		@RenderProduct("APM Agent PHP", "Application Performance Monitoring Agent for PHP", VersioningSystemId.ApmAgentPhp, pa.ApmAgentPhp)
		;
	}

	if (pa.ApmAgentPython is not null)
	{
		@RenderProduct("APM Agent Python", "Application Performance Monitoring Agent for Python", VersioningSystemId.ApmAgentPython, pa.ApmAgentPython)
		;
	}

	if (pa.ApmAgentRuby is not null)
	{
		@RenderProduct("APM Agent Ruby", "Application Performance Monitoring Agent for Ruby", VersioningSystemId.ApmAgentRuby, pa.ApmAgentRuby)
		;
	}

	if (pa.ApmAgentRum is not null)
	{
		@RenderProduct("APM Agent RUM", "Application Performance Monitoring Agent for Real User Monitoring", VersioningSystemId.ApmAgentRum, pa.ApmAgentRum)
		;
	}

	if (pa.EdotIos is not null)
	{
		@RenderProduct("EDOT iOS", "Elastic Distributions of OpenTelemetry for iOS", VersioningSystemId.EdotIos, pa.EdotIos)
		;
	}

	if (pa.EdotAndroid is not null)
	{
		@RenderProduct("EDOT Android", "Elastic Distributions of OpenTelemetry for Android", VersioningSystemId.EdotAndroid, pa.EdotAndroid)
		;
	}

	if (pa.EdotDotnet is not null)
	{
		@RenderProduct("EDOT .NET", " Elastic Distributions of OpenTelemetry for .NET", VersioningSystemId.EdotDotnet, pa.EdotDotnet)
		;
	}

	if (pa.EdotJava is not null)
	{
		@RenderProduct("EDOT Java", "Elastic Distributions of OpenTelemetry for Java", VersioningSystemId.EdotJava, pa.EdotJava)
		;
	}

	if (pa.EdotNode is not null)
	{
		@RenderProduct("EDOT Node.js", "Elastic Distributions of OpenTelemetry for Node.js", VersioningSystemId.EdotNode, pa.EdotNode)
		;
	}

	if (pa.EdotPhp is not null)
	{
		@RenderProduct("EDOT PHP", "Elastic Distributions of OpenTelemetry for PHP", VersioningSystemId.ApmAgentPhp, pa.EdotPhp)
		;
	}

	if (pa.EdotPython is not null)
	{
		@RenderProduct("EDOT Python", "Elastic Distributions of OpenTelemetry for Python", VersioningSystemId.EdotPython, pa.EdotPython)
		;
	}
}

@functions {

	private IHtmlContent RenderProduct(string name, string description, VersioningSystemId versioningSystemName, AppliesCollection applications)
	{
		var versioningSystem = Model.VersionsConfig.GetVersioningSystem(versioningSystemName);

		foreach (var applicability in applications)
		{
			var lifecycleTooltip = "";
			var badgeText = name;
			var lifecycleClass = applicability.GetLifeCycleName().ToLowerInvariant().Replace(" ", "-");
			switch (applicability.Lifecycle)
			{
				case ProductLifecycle.TechnicalPreview:
					if (TryGetRealVersion(applicability, out var previewVersion) && previewVersion > versioningSystem.Current)
					{
						badgeText = "Planned";
						lifecycleTooltip = "We plan to add this functionality in a future update. Plans may change without notice.";
						lifecycleClass = "planned";
					}
					else
					{
						lifecycleTooltip = "This functionality is in technical preview and may be changed or removed in a future release. Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.";
					}

					break;
				case ProductLifecycle.Beta:
					if (TryGetRealVersion(applicability, out var betaVersion) && betaVersion > versioningSystem.Current)
					{
						badgeText = "Planned";
						lifecycleTooltip = "We plan to add this functionality in a future update. Plans may change without notice.";
						lifecycleClass = "planned";
					}
					else
					{
						lifecycleTooltip = "This functionality is in beta and is subject to change. The design and code is less mature than official GA features and is being provided as-is with no warranties. Beta features are not subject to the support SLA of official GA features.";
					}

					break;
				case ProductLifecycle.GenerallyAvailable:
					if (TryGetRealVersion(applicability, out var version) && version > versioningSystem.Current)
					{
						badgeText = "Planned";
						lifecycleTooltip = "We plan to add this functionality in a future update. Plans may change without notice.";
						lifecycleClass = "planned";
					}

					break;
				case ProductLifecycle.Deprecated:
					if (TryGetRealVersion(applicability, out var deprecatedVersion) && deprecatedVersion > versioningSystem.Current)
					{
						badgeText = "Deprecation planned";
						lifecycleTooltip = "We plan to deprecate this functionality in a future update. Plans may change without notice.";
					}

					break;
				case ProductLifecycle.Removed:
					if (TryGetRealVersion(applicability, out var removedVersion) && removedVersion > versioningSystem.Current)
					{
						badgeText = "Removal planned";
						lifecycleTooltip = "We plan to remove this functionality in a future update. Plans may change without notice.";
					}

					break;
			}

			if (
				applicability.Version is null
				&& applicability.Lifecycle != ProductLifecycle.Deprecated
				&& applicability.Lifecycle != ProductLifecycle.Removed
				&& versioningSystem.Id is VersioningSystemId.Stack or VersioningSystemId.Self or VersioningSystemId.Ece or VersioningSystemId.Eck
			)
			{
				lifecycleTooltip += $"\n\nApplies to version {versioningSystem.Base} and later - may have been introduced in a previous version";
			}

			var badgeTextChanged = badgeText != name;
			<span class="applicable-info">
				<span class="applicable-name" data-tippy-content="@description">@name</span>

				@{
					var showLifeCycle = applicability.Lifecycle != ProductLifecycle.GenerallyAvailable && !badgeTextChanged;
					var showVersion = applicability.Version is not null and not AllVersions;
				}

				@if (!string.IsNullOrEmpty(name) && (showLifeCycle || showVersion))
				{
					<span class="applicable-separator"></span>
				}
				<span class="applicable-meta applicable-meta-@lifecycleClass" data-tippy-content="@lifecycleTooltip">
					@if (showLifeCycle)
					{
						<span
							class="applicable-lifecycle applicable-lifecycle-@lifecycleClass">@applicability.GetLifeCycleName()</span>
					}
					@if (showVersion)
					{
						@if (versioningSystem.Current >= applicability.Version!)
						{
							<span class="applicable-version applicable-version-@lifecycleClass">
								@applicability.Version
							</span>
						}
						else
						{
							@badgeText
						}
					}
				</span>
			</span>
		}

		return HtmlString.Empty;
	}

}

@functions {

	private static bool TryGetRealVersion(Applicability applicability, [NotNullWhen(true)] out SemVersion? version)
	{
		version = null;
		if (applicability.Version is not null && applicability.Version != AllVersions.Instance)
		{
			version = applicability.Version;
			return true;
		}

		return false;
	}

}
