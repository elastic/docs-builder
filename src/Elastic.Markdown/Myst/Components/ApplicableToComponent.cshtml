@using Elastic.Documentation
@using Elastic.Markdown.Myst.FrontMatter
@inherits RazorSlice<Elastic.Markdown.Myst.Components.ApplicableToViewModel>

@{
	var appliesTo = Model.AppliesTo;
}

@if (appliesTo.Stack is not null)
{
	@RenderProduct("Elastic Stack", appliesTo.Stack)
}
@if (appliesTo.Deployment is not null)
{
	if (appliesTo.Deployment.Ece is not null)
	{
		@RenderProduct("ECE", appliesTo.Deployment.Ece)
	}
	if (appliesTo.Deployment.Eck is not null)
	{
		@RenderProduct("ECK", appliesTo.Deployment.Eck)
	}
	if (appliesTo.Deployment.Ess is not null)
	{
		@RenderProduct("Elastic Cloud Hosted", appliesTo.Deployment.Ess)
	}
	if (appliesTo.Deployment.Self is not null)
	{
		@RenderProduct("Self Managed", appliesTo.Deployment.Self)
	}
}
@if (appliesTo.Serverless is not null)
{
	if (appliesTo.Serverless.AllProjects is not null)
	{
		@RenderProduct("Serverless", appliesTo.Serverless.AllProjects)
	}
	else
	{
		if (appliesTo.Serverless.Elasticsearch is not null)
		{
			@RenderProduct("Serverless Elasticsearch", appliesTo.Serverless.Elasticsearch)
		}
		if (appliesTo.Serverless.Observability is not null)
		{
			@RenderProduct("Serverless Observability", appliesTo.Serverless.Observability)
		}
		if (appliesTo.Serverless.Security is not null)
		{
			@RenderProduct("Serverless Security", appliesTo.Serverless.Security)
		}

	}

}
@if (appliesTo.Product is not null)
{
	@RenderProduct("", appliesTo.Product)
}

@functions {

	private IHtmlContent RenderProduct(string name, AppliesCollection applications)
	{
		var currentStackVersion = new SemVersion(9, 0, 0);
		foreach (var applicability in applications)
		{
			
			var tooltip = "";
			var badgeText = name;

			if (name == "Elastic Stack")
			{
				switch (applicability.Lifecycle)
				{
					case ProductLifecycle.TechnicalPreview:
						if (applicability.Version is not null && applicability.Version > currentStackVersion)
						{
							badgeText = "Planned";
							tooltip = "We plan to add this functionality in a future update. Plans may change without notice.";
						}
						else
						{
							tooltip = "This functionality is in technical preview and may be changed or removed in a future release. Elastic will work to fix any issues, but features in technical preview are not subject to the support SLA of official GA features.";
						}
						break;
					case ProductLifecycle.Beta:
						if (applicability.Version is not null && applicability.Version > currentStackVersion)
						{
							badgeText = "Planned";
							tooltip = "We plan to add this functionality in a future update. Plans may change without notice.";
						}
						else
						{
							tooltip = "This functionality is in beta and is subject to change. The design and code is less mature than official GA features and is being provided as-is with no warranties. Beta features are not subject to the support SLA of official GA features.";
						}

						break;
					case ProductLifecycle.GenerallyAvailable:
						if (applicability.Version is not null && applicability.Version > currentStackVersion)
						{
							badgeText = "Planned";
							tooltip = "We plan to add this functionality in a future update. Plans may change without notice.";
						}

						break;
					case ProductLifecycle.Deprecated:
						if (applicability.Version is not null && applicability.Version > currentStackVersion)
						{
							badgeText = "Deprecation planned";
							tooltip = "We plan to deprecate this functionality in a future update. Plans may change without notice.";
						}

						break;
					case ProductLifecycle.Removed:
						if (applicability.Version is not null && applicability.Version > currentStackVersion)
						{
							badgeText = "Removal planned";
							tooltip = "We plan to remove this functionality in a future update. Plans may change without notice.";
						}
						break;
				}
			}
			
			var lifecycleClass = applicability.GetLifeCycleName().ToLowerInvariant().Replace(" ", "-");
			<span class="applicable-info" data-tippy-content="@tooltip">
				@if (name == "Elastic Stack")
				{
					@badgeText
				}
				else
				{
					@name
				}
				<span class="applicable-meta applicable-meta-@lifecycleClass">
				@if (applicability.Lifecycle != ProductLifecycle.GenerallyAvailable && badgeText == name)
				{
					<span class="applicable-lifecycle applicable-lifecycle-@lifecycleClass">@applicability.GetLifeCycleName()</span>
				}
				@if (applicability.Version is not null and not AllVersions)
				{
					if (name == "Elastic Stack" && applicability.Version <= currentStackVersion)
					{
						<span class="applicable-version applicable-version-@lifecycleClass">@applicability.Version</span>
					}
				}
				</span>
			</span>
		}
		return HtmlString.Empty;
	}
}
