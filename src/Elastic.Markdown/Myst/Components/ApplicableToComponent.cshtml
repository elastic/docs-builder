@using Elastic.Markdown.Myst.FrontMatter
@inherits RazorSlice<Elastic.Markdown.Myst.Components.ApplicableToViewModel>

@{
	var appliesTo = Model.AppliesTo;
}

@if (appliesTo.Stack is not null)
{
	@RenderProduct("Elastic Stack", appliesTo.Stack)
}
@if (appliesTo.Deployment is not null)
{
	if (appliesTo.Deployment.Ece is not null)
	{
		@RenderProduct("ECE", appliesTo.Deployment.Ece)
	}
	if (appliesTo.Deployment.Eck is not null)
	{
		@RenderProduct("ECK", appliesTo.Deployment.Eck)
	}
	if (appliesTo.Deployment.Ess is not null)
	{
		@RenderProduct("Elastic Cloud Hosted", appliesTo.Deployment.Ess)
	}
	if (appliesTo.Deployment.Self is not null)
	{
		@RenderProduct("Self Managed", appliesTo.Deployment.Self)
	}
}
@if (appliesTo.Serverless is not null)
{
	if (appliesTo.Serverless.AllProjects is not null)
	{
		@RenderProduct("Serverless", appliesTo.Serverless.AllProjects)
	}
	else
	{
		if (appliesTo.Serverless.Elasticsearch is not null)
		{
			@RenderProduct("Serverless Elasticsearch", appliesTo.Serverless.Elasticsearch)
		}
		if (appliesTo.Serverless.Observability is not null)
		{
			@RenderProduct("Serverless Observability", appliesTo.Serverless.Observability)
		}
		if (appliesTo.Serverless.Security is not null)
		{
			@RenderProduct("Serverless Security", appliesTo.Serverless.Security)
		}

	}

}
@if (appliesTo.Product is not null)
{
	@RenderProduct("", appliesTo.Product)
}
@if (appliesTo.ProductApplicability is not null)
{
	var pa = appliesTo.ProductApplicability;
	if (pa.Ecctl is not null) { @RenderProduct("ECCTL", pa.Ecctl); }
	if (pa.Curator is not null) { @RenderProduct("Curator", pa.Curator); }
	if (pa.ApmAgentDotnet is not null) { @RenderProduct("APM Agent .NET", pa.ApmAgentDotnet); }
	if (pa.ApmAgentGo is not null) { @RenderProduct("APM Agent Go", pa.ApmAgentGo); }
	if (pa.ApmAgentJava is not null) { @RenderProduct("APM Agent Java", pa.ApmAgentJava); }
	if (pa.ApmAgentNode is not null) { @RenderProduct("APM Agent Node.js", pa.ApmAgentNode); }
	if (pa.ApmAgentPython is not null) { @RenderProduct("APM Agent Python", pa.ApmAgentPython); }
	if (pa.ApmAgentRuby is not null) { @RenderProduct("APM Agent Ruby", pa.ApmAgentRuby); }
	if (pa.ApmAgentRum is not null) { @RenderProduct("APM Agent RUM", pa.ApmAgentRum); }
	if (pa.EdotIos is not null) { @RenderProduct("OpenTelemetry iOS", pa.EdotIos); }
	if (pa.EdotAndroid is not null) { @RenderProduct("OpenTelemetry Android", pa.EdotAndroid); }
	if (pa.EdotDotnet is not null) { @RenderProduct("OpenTelemetry .NET", pa.EdotDotnet); }
	if (pa.EdotJava is not null) { @RenderProduct("OpenTelemetry Java", pa.EdotJava); }
	if (pa.EdotNode is not null) { @RenderProduct("OpenTelemetry Node.js", pa.EdotNode); }
	if (pa.EdotPhp is not null) { @RenderProduct("OpenTelemetry PHP", pa.EdotPhp); }
	if (pa.EdotPython is not null) { @RenderProduct("OpenTelemetry Python", pa.EdotPython); }
}

@functions {

	private IHtmlContent RenderProduct(string name, AppliesCollection applications)
	{
		foreach (var applicability in applications)
		{
			var lifecycleClass = applicability.GetLifeCycleName().ToLowerInvariant().Replace(" ", "-");
			<span class="applicable-info">
				@name
				<span class="applicable-meta applicable-meta-@lifecycleClass">
				@if (applicability.Lifecycle != ProductLifecycle.GenerallyAvailable)
				{
					<span class="applicable-lifecycle applicable-lifecycle-@lifecycleClass">@applicability.GetLifeCycleName()</span>
				}
				@if (applicability.Version is not null and not AllVersions)
				{
					<span class="applicable-version applicable-version-@lifecycleClass">@applicability.Version</span>
				}
				</span>
			</span>
		}
		return HtmlString.Empty;
	}
}