!function(){function t(t,e,r,a){Object.defineProperty(t,e,{get:r,set:a,enumerable:!0,configurable:!0})}var e=("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{}).parcelRequire6955,r=e.register;r("dd1vt",function(r,a){t(r.exports,"diagram",function(){return tf});var o=e("3hazq"),i=e("72x9i"),c=e("fBY3b");e("eqau5"),e("cRsqf");var n=e("fxedn");e("3tpah");var s=e("kNZMB");e("6XWbY"),e("jaQMJ"),e("ggtbI"),e("aWvOd"),e("2OCaF"),e("2Bif5");var d=e("6t5tb"),h={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},l=s.s.gitGraph,$=(0,d.a)(()=>(0,n.l)({...l,...(0,s.A)().gitGraph}),"getConfig"),m=new(0,o.a)(()=>{let t=$(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}});function g(){return(0,n.f)({length:7})}function y(t,e){let r=Object.create(null);return t.reduce((t,a)=>{let o=e(a);return r[o]||(r[o]=!0,t.push(a)),t},[])}(0,d.a)(g,"getID"),(0,d.a)(y,"uniqBy");var p=(0,d.a)(function(t){m.records.direction=t},"setDirection"),f=(0,d.a)(function(t){s.b.debug("options str",t),t=(t=t?.trim())||"{}";try{m.records.options=JSON.parse(t)}catch(t){s.b.error("error while parsing gitGraph options",t.message)}},"setOptions"),x=(0,d.a)(function(){return m.records.options},"getOptions"),u=(0,d.a)(function(t){let e=t.msg,r=t.id,a=t.type,o=t.tags;s.b.info("commit",e,r,a,o),s.b.debug("Entering commit:",e,r,a,o);let i=$();r=s.L.sanitizeText(r,i),e=s.L.sanitizeText(e,i),o=o?.map(t=>s.L.sanitizeText(t,i));let c={id:r||m.records.seq+"-"+g(),message:e,seq:m.records.seq++,type:a??h.NORMAL,tags:o??[],parents:null==m.records.head?[]:[m.records.head.id],branch:m.records.currBranch};m.records.head=c,s.b.info("main branch",i.mainBranchName),m.records.commits.set(c.id,c),m.records.branches.set(m.records.currBranch,c.id),s.b.debug("in pushCommit "+c.id)},"commit"),b=(0,d.a)(function(t){let e=t.name,r=t.order;if(e=s.L.sanitizeText(e,$()),m.records.branches.has(e))throw Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);m.records.branches.set(e,null!=m.records.head?m.records.head.id:null),m.records.branchConfig.set(e,{name:e,order:r}),E(e),s.b.debug("in createBranch")},"branch"),w=(0,d.a)(t=>{let e=t.branch,r=t.id,a=t.type,o=t.tags,i=$();e=s.L.sanitizeText(e,i),r&&(r=s.L.sanitizeText(r,i));let c=m.records.branches.get(m.records.currBranch),n=m.records.branches.get(e),d=c?m.records.commits.get(c):void 0,l=n?m.records.commits.get(n):void 0;if(d&&l&&d.branch===e)throw Error(`Cannot merge branch '${e}' into itself.`);if(m.records.currBranch===e){let t=Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===d||!d){let t=Error(`Incorrect usage of "merge". Current branch (${m.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!m.records.branches.has(e)){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===l||!l){let t=Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(d===l){let t=Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&m.records.commits.has(r)){let t=Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom Id");throw t.hash={text:`merge ${e} ${r} ${a} ${o?.join(" ")}`,token:`merge ${e} ${r} ${a} ${o?.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${a} ${o?.join(" ")}`]},t}let y={id:r||`${m.records.seq}-${g()}`,message:`merged branch ${e} into ${m.records.currBranch}`,seq:m.records.seq++,parents:null==m.records.head?[]:[m.records.head.id,n||""],branch:m.records.currBranch,type:h.MERGE,customType:a,customId:!!r,tags:o??[]};m.records.head=y,m.records.commits.set(y.id,y),m.records.branches.set(m.records.currBranch,y.id),s.b.debug(m.records.branches),s.b.debug("in mergeBranch")},"merge"),B=(0,d.a)(function(t){let e=t.id,r=t.targetId,a=t.tags,o=t.parent;s.b.debug("Entering cherryPick:",e,r,a);let i=$();if(e=s.L.sanitizeText(e,i),r=s.L.sanitizeText(r,i),a=a?.map(t=>s.L.sanitizeText(t,i)),o=s.L.sanitizeText(o,i),!e||!m.records.commits.has(e)){let t=Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let c=m.records.commits.get(e);if(void 0===c||!c)throw Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(o&&!(Array.isArray(c.parents)&&c.parents.includes(o)))throw Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let n=c.branch;if(c.type===h.MERGE&&!o)throw Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!m.records.commits.has(r)){if(n===m.records.currBranch){let t=Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let t=m.records.branches.get(m.records.currBranch);if(void 0===t||!t){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${m.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let i=m.records.commits.get(t);if(void 0===i||!i){let t=Error(`Incorrect usage of "cherry-pick". Current branch (${m.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let d={id:m.records.seq+"-"+g(),message:`cherry-picked ${c?.message} into ${m.records.currBranch}`,seq:m.records.seq++,parents:null==m.records.head?[]:[m.records.head.id,c.id],branch:m.records.currBranch,type:h.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${c.id}${c.type===h.MERGE?`|parent:${o}`:""}`]};m.records.head=d,m.records.commits.set(d.id,d),m.records.branches.set(m.records.currBranch,d.id),s.b.debug(m.records.branches),s.b.debug("in cherryPick")}},"cherryPick"),E=(0,d.a)(function(t){if(t=s.L.sanitizeText(t,$()),m.records.branches.has(t)){m.records.currBranch=t;let e=m.records.branches.get(m.records.currBranch);void 0!==e&&e?m.records.head=m.records.commits.get(e)??null:m.records.head=null}else{let e=Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}},"checkout");function L(t,e,r){let a=t.indexOf(e);-1===a?t.push(r):t.splice(a,1,r)}function T(t){let e=t.reduce((t,e)=>t.seq>e.seq?t:e,t[0]),r="";t.forEach(function(t){t===e?r+="	*":r+="	|"});let a=[r,e.id,e.seq];for(let t in m.records.branches)m.records.branches.get(t)===e.id&&a.push(t);if(s.b.debug(a.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){let r=m.records.commits.get(e.parents[0]);L(t,e,r),e.parents[1]&&t.push(m.records.commits.get(e.parents[1]))}else{if(0==e.parents.length)return;if(e.parents[0]){let r=m.records.commits.get(e.parents[0]);L(t,e,r)}}T(t=y(t,t=>t.id))}(0,d.a)(L,"upsert"),(0,d.a)(T,"prettyPrintCommitHistory");var C=(0,d.a)(function(){s.b.debug(m.records.commits),T([R()[0]])},"prettyPrint"),k=(0,d.a)(function(){m.reset(),(0,s.P)()},"clear"),M=(0,d.a)(function(){return[...m.records.branchConfig.values()].map((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)}).sort((t,e)=>(t.order??0)-(e.order??0)).map(({name:t})=>({name:t}))},"getBranchesAsObjArray"),v=(0,d.a)(function(){return m.records.branches},"getBranches"),P=(0,d.a)(function(){return m.records.commits},"getCommits"),R=(0,d.a)(function(){let t=[...m.records.commits.values()];return t.forEach(function(t){s.b.debug(t.id)}),t.sort((t,e)=>t.seq-e.seq),t},"getCommitsArray"),A={commitType:h,getConfig:$,setDirection:p,setOptions:f,getOptions:x,commit:u,branch:b,merge:w,cherryPick:B,checkout:E,prettyPrint:C,clear:k,getBranchesAsObjArray:M,getBranches:v,getCommits:P,getCommitsArray:R,getCurrentBranch:(0,d.a)(function(){return m.records.currBranch},"getCurrentBranch"),getDirection:(0,d.a)(function(){return m.records.direction},"getDirection"),getHead:(0,d.a)(function(){return m.records.head},"getHead"),setAccTitle:s.Q,getAccTitle:s.R,getAccDescription:s.T,setAccDescription:s.S,setDiagramTitle:s.U,getDiagramTitle:s.V},I=(0,d.a)((t,e)=>{for(let r of((0,i.a)(t,e),t.dir&&e.setDirection(t.dir),t.statements))G(r,e)},"populate"),G=(0,d.a)((t,e)=>{let r={Commit:(0,d.a)(t=>e.commit(O(t)),"Commit"),Branch:(0,d.a)(t=>e.branch(q(t)),"Branch"),Merge:(0,d.a)(t=>e.merge(z(t)),"Merge"),Checkout:(0,d.a)(t=>e.checkout(H(t)),"Checkout"),CherryPicking:(0,d.a)(t=>e.cherryPick(D(t)),"CherryPicking")}[t.$type];r?r(t):s.b.error(`Unknown statement type: ${t.$type}`)},"parseStatement"),O=(0,d.a)(t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?h[t.type]:h.NORMAL,tags:t.tags??void 0}),"parseCommit"),q=(0,d.a)(t=>({name:t.name,order:t.order??0}),"parseBranch"),z=(0,d.a)(t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?h[t.type]:void 0,tags:t.tags??void 0}),"parseMerge"),H=(0,d.a)(t=>t.branch,"parseCheckout"),D=(0,d.a)(t=>({id:t.id,targetId:"",tags:t.tags?.length===0?void 0:t.tags,parent:t.parent}),"parseCherryPicking"),S={parse:(0,d.a)(async t=>{let e=await (0,c.a)("gitGraph",t);s.b.debug(e),I(e,A)},"parse")},N=(0,s.X)(),W=N?.gitGraph,j=new Map,_=new Map,F=new Map,Y=[],K=0,U="LR",V=(0,d.a)(()=>{j.clear(),_.clear(),F.clear(),K=0,Y=[],U="LR"},"clear"),Q=(0,d.a)(t=>{let e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach(t=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)}),e},"drawText"),X=(0,d.a)(t=>{let e,r,a;return"BT"===U?(r=(0,d.a)((t,e)=>t<=e,"comparisonFunc"),a=1/0):(r=(0,d.a)((t,e)=>t>=e,"comparisonFunc"),a=0),t.forEach(t=>{let o="TB"===U||"BT"==U?_.get(t)?.y:_.get(t)?.x;void 0!==o&&r(o,a)&&(e=t,a=o)}),e},"findClosestParent"),J=(0,d.a)(t=>{let e="",r=1/0;return t.forEach(t=>{let a=_.get(t).y;a<=r&&(e=t,r=a)}),e||void 0},"findClosestParentBT"),Z=(0,d.a)((t,e,r)=>{let a=r,o=r,i=[];t.forEach(t=>{let r=e.get(t);if(!r)throw Error(`Commit not found for key ${t}`);r.parents.length?o=Math.max(a=te(r),o):i.push(r),tr(r,a)}),a=o,i.forEach(t=>{ta(t,a,r)}),t.forEach(t=>{let r=e.get(t);if(r?.parents.length){let t=J(r.parents);(a=_.get(t).y-40)<=o&&(o=a);let e=j.get(r.branch).pos,i=a-10;_.set(r.id,{x:e,y:i})}})},"setParallelBTPos"),tt=(0,d.a)(t=>{let e=X(t.parents.filter(t=>null!==t));if(!e)throw Error(`Closest parent not found for commit ${t.id}`);let r=_.get(e)?.y;if(void 0===r)throw Error(`Closest parent position not found for commit ${t.id}`);return r},"findClosestParentPos"),te=(0,d.a)(t=>tt(t)+40,"calculateCommitPosition"),tr=(0,d.a)((t,e)=>{let r=j.get(t.branch);if(!r)throw Error(`Branch not found for commit ${t.id}`);let a=r.pos,o=e+10;return _.set(t.id,{x:a,y:o}),{x:a,y:o}},"setCommitPosition"),ta=(0,d.a)((t,e,r)=>{let a=j.get(t.branch);if(!a)throw Error(`Branch not found for commit ${t.id}`);let o=a.pos;_.set(t.id,{x:o,y:e+r})},"setRootPosition"),to=(0,d.a)((t,e,r,a,o,i)=>{if(i===h.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${o%8} ${a}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${o%8} ${a}-inner`);else if(i===h.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`);else{let c=t.append("circle");if(c.attr("cx",r.x),c.attr("cy",r.y),c.attr("r",e.type===h.MERGE?9:10),c.attr("class",`commit ${e.id} commit${o%8}`),i===h.MERGE){let i=t.append("circle");i.attr("cx",r.x),i.attr("cy",r.y),i.attr("r",6),i.attr("class",`commit ${a} ${e.id} commit${o%8}`)}i===h.REVERSE&&t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${e.id} commit${o%8}`)}},"drawCommitBullet"),ti=(0,d.a)((t,e,r,a)=>{if(e.type!==h.CHERRY_PICK&&(e.customId&&e.type===h.MERGE||e.type!==h.MERGE)&&W?.showCommitLabel){let o=t.append("g"),i=o.insert("rect").attr("class","commit-label-bkg"),c=o.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(e.id),n=c.node()?.getBBox();if(n&&(i.attr("x",r.posWithOffset-n.width/2-2).attr("y",r.y+13.5).attr("width",n.width+4).attr("height",n.height+4),"TB"===U||"BT"===U?(i.attr("x",r.x-(n.width+16+5)).attr("y",r.y-12),c.attr("x",r.x-(n.width+16)).attr("y",r.y+n.height-12)):c.attr("x",r.posWithOffset-n.width/2),W.rotateCommitLabel))if("TB"===U||"BT"===U)c.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),i.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let t=-7.5-(n.width+10)/25*9.5,e=10+n.width/25*8.5;o.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+r.y+")")}}},"drawCommitLabel"),tc=(0,d.a)((t,e,r,a)=>{if(e.tags.length>0){let o=0,i=0,c=0,n=[];for(let a of e.tags.reverse()){let e=t.insert("polygon"),s=t.append("circle"),d=t.append("text").attr("y",r.y-16-o).attr("class","tag-label").text(a),h=d.node()?.getBBox();if(!h)throw Error("Tag bbox not found");i=Math.max(i,h.width),c=Math.max(c,h.height),d.attr("x",r.posWithOffset-h.width/2),n.push({tag:d,hole:s,rect:e,yOffset:o}),o+=20}for(let{tag:t,hole:e,rect:o,yOffset:s}of n){let n=c/2,d=r.y-19.2-s;if(o.attr("class","tag-label-bkg").attr("points",`
      ${a-i/2-2},${d+2}  
      ${a-i/2-2},${d-2}
      ${r.posWithOffset-i/2-4},${d-n-2}
      ${r.posWithOffset+i/2+4},${d-n-2}
      ${r.posWithOffset+i/2+4},${d+n+2}
      ${r.posWithOffset-i/2-4},${d+n+2}`),e.attr("cy",d).attr("cx",a-i/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===U||"BT"===U){let c=a+s;o.attr("class","tag-label-bkg").attr("points",`
        ${r.x},${c+2}
        ${r.x},${c-2}
        ${r.x+10},${c-n-2}
        ${r.x+10+i+4},${c-n-2}
        ${r.x+10+i+4},${c+n+2}
        ${r.x+10},${c+n+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("cx",r.x+2).attr("cy",c).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("x",r.x+5).attr("y",c+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}},"drawCommitTags"),tn=(0,d.a)(t=>{switch(t.customType??t.type){case h.NORMAL:return"commit-normal";case h.REVERSE:return"commit-reverse";case h.HIGHLIGHT:return"commit-highlight";case h.MERGE:return"commit-merge";case h.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),ts=(0,d.a)((t,e,r,a)=>{let o={x:0,y:0};if(!(t.parents.length>0))return"TB"===e?30:"BT"===e?(a.get(t.id)??o).y-40:0;{let r=X(t.parents);if(r){let i=a.get(r)??o;return"TB"===e?i.y+40:"BT"===e?(a.get(t.id)??o).y-40:i.x+40}}return 0},"calculatePosition"),td=(0,d.a)((t,e,r)=>{let a="BT"===U&&r?e:e+10,o="TB"===U||"BT"===U?a:j.get(t.branch)?.pos,i="TB"===U||"BT"===U?j.get(t.branch)?.pos:a;if(void 0===i||void 0===o)throw Error(`Position were undefined for commit ${t.id}`);return{x:i,y:o,posWithOffset:a}},"getCommitPosition"),th=(0,d.a)((t,e,r)=>{if(!W)throw Error("GitGraph config not found");let a=t.append("g").attr("class","commit-bullets"),o=t.append("g").attr("class","commit-labels"),i=30*("TB"===U||"BT"===U),c=[...e.keys()],n=W?.parallelCommits??!1,s=c.sort((0,d.a)((t,r)=>{let a=e.get(t)?.seq,o=e.get(r)?.seq;return void 0!==a&&void 0!==o?a-o:0},"sortKeys"));"BT"===U&&(n&&Z(s,e,i),s=s.reverse()),s.forEach(t=>{let c=e.get(t);if(!c)throw Error(`Commit not found for key ${t}`);n&&(i=ts(c,U,i,_));let s=td(c,i,n);if(r){let t=tn(c),e=c.customType??c.type,r=j.get(c.branch)?.index??0;to(a,c,s,t,r,e),ti(o,c,s,i),tc(o,c,s,i)}"TB"===U||"BT"===U?_.set(c.id,{x:s.x,y:s.posWithOffset}):_.set(c.id,{x:s.posWithOffset,y:s.y}),(i="BT"===U&&n?i+40:i+40+10)>K&&(K=i)})},"drawCommits"),tl=(0,d.a)((t,e,r,a,o)=>{let i=("TB"===U||"BT"===U?r.x<a.x:r.y<a.y)?e.branch:t.branch,c=(0,d.a)(t=>t.branch===i,"isOnBranchToGetCurve"),n=(0,d.a)(r=>r.seq>t.seq&&r.seq<e.seq,"isBetweenCommits");return[...o.values()].some(t=>n(t)&&c(t))},"shouldRerouteArrow"),t$=(0,d.a)((t,e,r=0)=>{let a=t+Math.abs(t-e)/2;if(r>5)return a;if(Y.every(t=>Math.abs(t-a)>=10))return Y.push(a),a;let o=Math.abs(t-e);return t$(t,e-o/5,r+1)},"findLane"),tm=(0,d.a)((t,e,r,a)=>{let o,i=_.get(e.id),c=_.get(r.id);if(void 0===i||void 0===c)throw Error(`Commit positions not found for commits ${e.id} and ${r.id}`);let n=tl(e,r,i,c,a),s="",d="",l=0,$=0,m=j.get(r.branch)?.index;if(r.type===h.MERGE&&e.id!==r.parents[0]&&(m=j.get(e.branch)?.index),n){s="A 10 10, 0, 0, 0,",d="A 10 10, 0, 0, 1,",l=10,$=10;let t=i.y<c.y?t$(i.y,c.y):t$(c.y,i.y),r=i.x<c.x?t$(i.x,c.x):t$(c.x,i.x);"TB"===U?i.x<c.x?o=`M ${i.x} ${i.y} L ${r-l} ${i.y} ${d} ${r} ${i.y+$} L ${r} ${c.y-l} ${s} ${r+$} ${c.y} L ${c.x} ${c.y}`:(m=j.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${r+l} ${i.y} ${s} ${r} ${i.y+$} L ${r} ${c.y-l} ${d} ${r-$} ${c.y} L ${c.x} ${c.y}`):"BT"===U?i.x<c.x?o=`M ${i.x} ${i.y} L ${r-l} ${i.y} ${s} ${r} ${i.y-$} L ${r} ${c.y+l} ${d} ${r+$} ${c.y} L ${c.x} ${c.y}`:(m=j.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${r+l} ${i.y} ${d} ${r} ${i.y-$} L ${r} ${c.y+l} ${s} ${r-$} ${c.y} L ${c.x} ${c.y}`):i.y<c.y?o=`M ${i.x} ${i.y} L ${i.x} ${t-l} ${s} ${i.x+$} ${t} L ${c.x-l} ${t} ${d} ${c.x} ${t+$} L ${c.x} ${c.y}`:(m=j.get(e.branch)?.index,o=`M ${i.x} ${i.y} L ${i.x} ${t+l} ${d} ${i.x+$} ${t} L ${c.x-l} ${t} ${s} ${c.x} ${t-$} L ${c.x} ${c.y}`)}else s="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,$=20,"TB"===U?(i.x<c.x&&(o=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${c.y-l} ${s} ${i.x+$} ${c.y} L ${c.x} ${c.y}`:`M ${i.x} ${i.y} L ${c.x-l} ${i.y} ${d} ${c.x} ${i.y+$} L ${c.x} ${c.y}`),i.x>c.x&&(s="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,$=20,o=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${c.y-l} ${d} ${i.x-$} ${c.y} L ${c.x} ${c.y}`:`M ${i.x} ${i.y} L ${c.x+l} ${i.y} ${s} ${c.x} ${i.y+$} L ${c.x} ${c.y}`),i.x===c.x&&(o=`M ${i.x} ${i.y} L ${c.x} ${c.y}`)):"BT"===U?(i.x<c.x&&(o=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${c.y+l} ${d} ${i.x+$} ${c.y} L ${c.x} ${c.y}`:`M ${i.x} ${i.y} L ${c.x-l} ${i.y} ${s} ${c.x} ${i.y-$} L ${c.x} ${c.y}`),i.x>c.x&&(s="A 20 20, 0, 0, 0,",d="A 20 20, 0, 0, 1,",l=20,$=20,o=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${i.x} ${c.y+l} ${s} ${i.x-$} ${c.y} L ${c.x} ${c.y}`:`M ${i.x} ${i.y} L ${c.x-l} ${i.y} ${s} ${c.x} ${i.y-$} L ${c.x} ${c.y}`),i.x===c.x&&(o=`M ${i.x} ${i.y} L ${c.x} ${c.y}`)):(i.y<c.y&&(o=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${c.x-l} ${i.y} ${d} ${c.x} ${i.y+$} L ${c.x} ${c.y}`:`M ${i.x} ${i.y} L ${i.x} ${c.y-l} ${s} ${i.x+$} ${c.y} L ${c.x} ${c.y}`),i.y>c.y&&(o=r.type===h.MERGE&&e.id!==r.parents[0]?`M ${i.x} ${i.y} L ${c.x-l} ${i.y} ${s} ${c.x} ${i.y-$} L ${c.x} ${c.y}`:`M ${i.x} ${i.y} L ${i.x} ${c.y+l} ${d} ${i.x+$} ${c.y} L ${c.x} ${c.y}`),i.y===c.y&&(o=`M ${i.x} ${i.y} L ${c.x} ${c.y}`));if(void 0===o)throw Error("Line definition not found");t.append("path").attr("d",o).attr("class","arrow arrow"+m%8)},"drawArrow"),tg=(0,d.a)((t,e)=>{let r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach(t=>{let a=e.get(t);a.parents&&a.parents.length>0&&a.parents.forEach(t=>{tm(r,e.get(t),a,e)})})},"drawArrows"),ty=(0,d.a)((t,e)=>{let r=t.append("g");e.forEach((t,e)=>{let a=e%8,o=j.get(t.name)?.pos;if(void 0===o)throw Error(`Position not found for branch ${t.name}`);let i=r.append("line");i.attr("x1",0),i.attr("y1",o),i.attr("x2",K),i.attr("y2",o),i.attr("class","branch branch"+a),"TB"===U?(i.attr("y1",30),i.attr("x1",o),i.attr("y2",K),i.attr("x2",o)):"BT"===U&&(i.attr("y1",K),i.attr("x1",o),i.attr("y2",30),i.attr("x2",o)),Y.push(o);let c=Q(t.name),n=r.insert("rect"),s=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);s.node().appendChild(c);let d=c.getBBox();n.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-30*(W?.rotateCommitLabel===!0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),s.attr("transform","translate("+(-d.width-14-30*(W?.rotateCommitLabel===!0))+", "+(o-d.height/2-1)+")"),"TB"===U?(n.attr("x",o-d.width/2-10).attr("y",0),s.attr("transform","translate("+(o-d.width/2-5)+", 0)")):"BT"===U?(n.attr("x",o-d.width/2-10).attr("y",K),s.attr("transform","translate("+(o-d.width/2-5)+", "+K+")")):n.attr("transform","translate(-19, "+(o-d.height/2)+")")})},"drawBranches"),tp=(0,d.a)(function(t,e,r,a,o){return j.set(t,{pos:e,index:r}),e+=50+40*!!o+("TB"===U||"BT"===U?a.width/2:0)},"setBranchPosition"),tf={parser:S,db:A,renderer:{draw:(0,d.a)(function(t,e,r,a){if(V(),s.b.debug("in gitgraph renderer",t+`
`,"id:",e,r),!W)throw Error("GitGraph config not found");let o=W.rotateCommitLabel??!1,i=a.db;F=i.getCommits();let c=i.getBranchesAsObjArray();U=i.getDirection();let d=(0,s.fa)(`[id="${e}"]`),h=0;c.forEach((t,e)=>{let r=Q(t.name),a=d.append("g"),i=a.insert("g").attr("class","branchLabel"),c=i.insert("g").attr("class","label branch-label");c.node()?.appendChild(r);let n=r.getBBox();h=tp(t.name,h,e,n,o),c.remove(),i.remove(),a.remove()}),th(d,F,!1),W.showBranches&&ty(d,c),tg(d,F),th(d,F,!0),n.m.insertTitle(d,"gitTitleText",W.titleTopMargin??0,i.getDiagramTitle()),(0,s._)(void 0,d,W.diagramPadding,W.useMaxWidth)},"draw")},styles:(0,d.a)(t=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(e=>`
        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }
        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }
        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }
        .label${e}  { fill: ${t["git"+e]}; }
        .arrow${e} { stroke: ${t["git"+e]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${t.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}
  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}
  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }
  .tag-hole { fill: ${t.textColor}; }

  .commit-merge {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }
  .commit-reverse {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${t.primaryColor};
    fill: ${t.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${t.textColor};
  }
`,"getStyles")}}),r("3hazq",function(r,a){t(r.exports,"a",function(){return i});var o=e("6t5tb"),i=class{constructor(t){this.init=t,this.records=this.init()}static #t=(0,o.a)(this,"ImperativeState");reset(){this.records=this.init()}}}),r("72x9i",function(r,a){function o(t,e){t.accDescr&&e.setAccDescription?.(t.accDescr),t.accTitle&&e.setAccTitle?.(t.accTitle),t.title&&e.setDiagramTitle?.(t.title)}t(r.exports,"a",function(){return o}),(0,e("6t5tb").a)(o,"populateCommonDb")})}();
//# sourceMappingURL=gitGraphDiagram-LRIBUTDQ.8ffc007b.js.map
