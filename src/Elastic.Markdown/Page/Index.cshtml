@using System.Text.Json
@using Elastic.Documentation.Configuration
@using Elastic.Documentation.Extensions
@using Elastic.Markdown
@using Elastic.Markdown.Myst.Components
@using Markdig
@using ViewModelSerializerContext = Elastic.Markdown.Page.ViewModelSerializerContext
@inherits RazorSliceHttpResult<Elastic.Markdown.Page.IndexViewModel>
@implements IUsesLayout<Elastic.Markdown._Layout, MarkdownLayoutViewModel>
@functions {
	public MarkdownLayoutViewModel LayoutModel => new()
	{
		DocsBuilderVersion = ShortId.Create(BuildContext.Version),
		Layout = Model.CurrentDocument.YamlFrontMatter?.Layout,
		RenderHamburgerIcon = Model.CurrentDocument.YamlFrontMatter?.Layout != MarkdownPageLayout.LandingPage,
		DocSetName = Model.DocSetName,
		Title = $"{Model.Title} | {Model.SiteName}",
		Description = Model.Description,
		PageTocItems = Model.PageTocItems.Where(i => i is
			{
				Level: 2 or 3
			})
			.ToList(),
		CurrentNavigationItem = Model.CurrentNavigationItem,
		Previous = Model.PreviousDocument,
		Next = Model.NextDocument,
		Parents = Model.Parents,
		NavigationHtml = Model.NavigationHtml,
		UrlPathPrefix = Model.UrlPathPrefix,
		GithubEditUrl = Model.GithubEditUrl,
		AllowIndexing = Model.AllowIndexing,
		CanonicalBaseUrl = Model.CanonicalBaseUrl,
		GoogleTagManager = Model.GoogleTagManager,
		Features = Model.Features,
		StaticFileContentHashProvider = Model.StaticFileContentHashProvider,
		ReportIssueUrl = Model.ReportIssueUrl,
		LegacyPages = Model.LegacyPages,
		CurrentVersion = Model.CurrentVersion,
		AllVersionsUrl = Model.AllVersionsUrl,
		VersionDropdownSerializedModel = JsonSerializer.Serialize(Model.VersionDropdownItems,
			ViewModelSerializerContext.Default.VersionDrownDownItemViewModelArray),
	};
	protected override Task ExecuteSectionAsync(string name)
	{
		if (name == GlobalSections.Head)
		{
			<meta class="elastic" name="product_version" content="@(new HtmlString(Model.CurrentVersion))"/>
			<meta name="DC.identifier" content="@(new HtmlString(Model.CurrentVersion))"/>
		}
		if (name == GlobalSections.Head && Model.Products is { Count: > 0 })
		{
			var products = string.Join(",", Model.Products.Select(p => p.DisplayName));
			<meta class="elastic" name="product_name" content="@(products)"/>
			<meta name="DC.subject" content="@(products)"/>
		}
		return Task.CompletedTask;
	}
}
<section id="elastic-docs-v3">
	@* This way it's correctly rendered as <h1>text</h1> instead of <h1><p>text</p></h1> *@
	@(new HtmlString(Markdown.ToHtml("# " + Model.TitleRaw)))
	@if (Model.AppliesTo is not null)
	{
		<p class="applies">
		@await RenderPartialAsync(ApplicableToComponent.Create(new ApplicableToViewModel
		{
			AppliesTo = Model.AppliesTo,
			Inline = false
		}))
		</p>
	}
	@(new HtmlString(Model.MarkdownHtml))
</section>
